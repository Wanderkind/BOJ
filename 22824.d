import std.stdio;
import std.algorithm;
import std.math;
//import std.conv;
//import std.numeric;
//import std.range;
//import std.array;
//import std.bigint;
//import std.string;


int[2][6][88] shape = [
    [[0, 0], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0]], [[0, 0], [1, -3], [1, -2], [1, -1], [1, 0], [2, 0]], [[0, 0], [0, 1], [0, 2], [1, 1], [2, 1], [3, 1]], [[0, 0], [0, 1], [0, 2], [1, 1], [2, 1], [3, 1]], [[0, 0], [1, -3], [1, -2], [1, -1], [1, 0], [2, 0]], [[0, 0], [1, 0], [1, 1], [1, 2], [1, 3], [2, 0]], [[0, 0], [1, 0], [2, 0], [3, -1], [3, 0], [3, 1]], [[0, 0], [1, 0], [2, 0], [3, -1], [3, 0], [3, 1]],
    [[0, 0], [1, -1], [1, 0], [1, 1], [1, 2], [2, -1]], [[0, 0], [1, -2], [1, -1], [1, 0], [1, 1], [2, 1]], [[0, 0], [0, 1], [1, 1], [1, 2], [2, 1], [3, 1]], [[0, 0], [0, 1], [1, -1], [1, 0], [2, 0], [3, 0]], [[0, 0], [1, -3], [1, -2], [1, -1], [1, 0], [2, -1]], [[0, 0], [1, 0], [1, 1], [1, 2], [1, 3], [2, 1]], [[0, 0], [1, 0], [2, -1], [2, 0], [3, 0], [3, 1]], [[0, 0], [1, 0], [2, 0], [2, 1], [3, -1], [3, 0]],
    [[0, 0], [1, -2], [1, -1], [1, 0], [1, 1], [2, -2]], [[0, 0], [1, -1], [1, 0], [1, 1], [1, 2], [2, 2]], [[0, 0], [0, 1], [1, 1], [2, 1], [2, 2], [3, 1]], [[0, 0], [0, 1], [1, 0], [2, -1], [2, 0], [3, 0]], [[0, 0], [1, -3], [1, -2], [1, -1], [1, 0], [2, -2]], [[0, 0], [1, 0], [1, 1], [1, 2], [1, 3], [2, 2]], [[0, 0], [1, -1], [1, 0], [2, 0], [3, 0], [3, 1]], [[0, 0], [1, 0], [1, 1], [2, 0], [3, -1], [3, 0]],
    [[0, 0], [1, -3], [1, -2], [1, -1], [1, 0], [2, -3]], [[0, 0], [1, 0], [1, 1], [1, 2], [1, 3], [2, 3]], [[0, 0], [0, 1], [1, 1], [2, 1], [3, 1], [3, 2]], [[0, 0], [0, 1], [1, 0], [2, 0], [3, -1], [3, 0]], [[0, 0], [1, -3], [1, -2], [1, -1], [1, 0], [2, -3]], [[0, 0], [1, 0], [1, 1], [1, 2], [1, 3], [2, 3]], [[0, 0], [0, 1], [1, 1], [2, 1], [3, 1], [3, 2]], [[0, 0], [0, 1], [1, 0], [2, 0], [3, -1], [3, 0]],
    [[0, 0], [1, -1], [1, 0], [1, 1], [1, 2], [2, 0]], [[0, 0], [1, -2], [1, -1], [1, 0], [1, 1], [2, 0]], [[0, 0], [1, -1], [1, 0], [1, 1], [2, 0], [3, 0]], [[0, 0], [1, -1], [1, 0], [1, 1], [2, 0], [3, 0]], [[0, 0], [1, -2], [1, -1], [1, 0], [1, 1], [2, 0]], [[0, 0], [1, -1], [1, 0], [1, 1], [1, 2], [2, 0]], [[0, 0], [1, 0], [2, -1], [2, 0], [2, 1], [3, 0]], [[0, 0], [1, 0], [2, -1], [2, 0], [2, 1], [3, 0]],
    [[0, 0], [1, -2], [1, -1], [1, 0], [1, 1], [2, -1]], [[0, 0], [1, -1], [1, 0], [1, 1], [1, 2], [2, 1]], [[0, 0], [1, -1], [1, 0], [2, 0], [2, 1], [3, 0]], [[0, 0], [1, 0], [1, 1], [2, -1], [2, 0], [3, 0]], [[0, 0], [1, -2], [1, -1], [1, 0], [1, 1], [2, -1]], [[0, 0], [1, -1], [1, 0], [1, 1], [1, 2], [2, 1]], [[0, 0], [1, -1], [1, 0], [2, 0], [2, 1], [3, 0]], [[0, 0], [1, 0], [1, 1], [2, -1], [2, 0], [3, 0]],
    [[0, 0], [0, 1], [0, 2], [1, -2], [1, -1], [1, 0]], [[0, 0], [0, 1], [0, 2], [1, 2], [1, 3], [1, 4]], [[0, 0], [1, 0], [2, 0], [2, 1], [3, 1], [4, 1]], [[0, 0], [1, 0], [2, -1], [2, 0], [3, -1], [4, -1]], [[0, 0], [0, 1], [0, 2], [1, -2], [1, -1], [1, 0]], [[0, 0], [0, 1], [0, 2], [1, 2], [1, 3], [1, 4]], [[0, 0], [1, 0], [2, 0], [2, 1], [3, 1], [4, 1]], [[0, 0], [1, 0], [2, -1], [2, 0], [3, -1], [4, -1]],
    [[0, 0], [0, 1], [1, -1], [1, 0], [2, -2], [2, -1]], [[0, 0], [0, 1], [1, 1], [1, 2], [2, 2], [2, 3]], [[0, 0], [1, 0], [1, 1], [2, 1], [2, 2], [3, 2]], [[0, 0], [1, -1], [1, 0], [2, -2], [2, -1], [3, -2]], [[0, 0], [0, 1], [1, -1], [1, 0], [2, -2], [2, -1]], [[0, 0], [0, 1], [1, 1], [1, 2], [2, 2], [2, 3]], [[0, 0], [1, 0], [1, 1], [2, 1], [2, 2], [3, 2]], [[0, 0], [1, -1], [1, 0], [2, -2], [2, -1], [3, -2]],
    [[0, 0], [0, 1], [1, -2], [1, -1], [1, 0], [2, -2]], [[0, 0], [0, 1], [1, 1], [1, 2], [1, 3], [2, 3]], [[0, 0], [0, 1], [1, 1], [2, 1], [2, 2], [3, 2]], [[0, 0], [0, 1], [1, 0], [2, -1], [2, 0], [3, -1]], [[0, 0], [1, -2], [1, -1], [1, 0], [2, -3], [2, -2]], [[0, 0], [1, 0], [1, 1], [1, 2], [2, 2], [2, 3]], [[0, 0], [1, 0], [1, 1], [2, 1], [3, 1], [3, 2]], [[0, 0], [1, -1], [1, 0], [2, -1], [3, -2], [3, -1]],
    [[0, 0], [0, 1], [1, 1], [1, 2], [1, 3], [2, 1]], [[0, 0], [0, 1], [1, -2], [1, -1], [1, 0], [2, 0]], [[0, 0], [1, -2], [1, -1], [1, 0], [2, -1], [3, -1]], [[0, 0], [1, 0], [1, 1], [1, 2], [2, 1], [3, 1]], [[0, 0], [1, -2], [1, -1], [1, 0], [2, 0], [2, 1]], [[0, 0], [1, 0], [1, 1], [1, 2], [2, -1], [2, 0]], [[0, 0], [1, 0], [2, -1], [2, 0], [2, 1], [3, -1]], [[0, 0], [1, 0], [2, -1], [2, 0], [2, 1], [3, 1]],
    [[0, 0], [1, -1], [1, 0], [1, 1], [2, 1], [2, 2]], [[0, 0], [1, -1], [1, 0], [1, 1], [2, -2], [2, -1]], [[0, 0], [1, 0], [1, 1], [2, -1], [2, 0], [3, -1]], [[0, 0], [1, -1], [1, 0], [2, 0], [2, 1], [3, 1]], [[0, 0], [0, 1], [1, 1], [1, 2], [1, 3], [2, 2]], [[0, 0], [0, 1], [1, -2], [1, -1], [1, 0], [2, -1]], [[0, 0], [1, -1], [1, 0], [2, -2], [2, -1], [3, -1]], [[0, 0], [1, 0], [1, 1], [2, 1], [2, 2], [3, 1]]
];

bool sol(){

    int[5][5] l;

    foreach(i; 0..5){
        foreach(j; 0..5){
            scanf("%d", &l[i][j]);
        }
    }

    // find net in mesh, the first 6 numbered cells to be examined, return false if not 6
    int cell = 0, temp;
    int[] num;
    int[2][] loc;
    foreach(i; 0..5){
        foreach(j; 0..5){
            temp = l[i][j];
            if(temp){
                num ~= temp;
                loc ~= [i, j];
                cell++;
            }
        }
    }
    if(cell != 6){
        return false;
    }

    // is shape proper?
    int[2][6] d;
    int p = loc[0][0], q = loc[0][1];
    foreach(i; 0..6){
        d[i] = [loc[i][0]-p, loc[i][1]-q];
    }
    bool foo = false;
    foreach(i; 0..88){
        if(shape[i] == d){
            foo = true;
            break;
        }
    }
    if(!foo){
        return false;
    }

    // sum of opposites all 7?
    bool[6] excpt = false;
    foreach(i; 0..5){
        foreach(j; i+1..6){
            p = abs(loc[i][0]-loc[j][0]);
            q = abs(loc[i][1]-loc[j][1]);
            if(p+q == 2 && abs(p-q) == 2){
                excpt[i] = true;
                excpt[j] = true;
                if(num[i]+num[j] != 7){
                    return false;
                }
            }
        }
    }
    foreach(i; 0..5){
        if(!excpt[i]){
            foreach(j; i+1..6){
                if(!excpt[j]){
                    p = abs(loc[i][0]-loc[j][0]);
                    q = abs(loc[i][1]-loc[j][1]);
                    if(p+q == 3 && abs(p-q) == 1){
                        if(num[i]+num[j] != 7){
                            return false;
                        }
                    }
                }
            }
        }
    }

    // all numbers 1 to 6?
    foreach(i; 1..7){
        if(!num.canFind(i)){
            return false;
        }
    }

    return true;
}

void main(){

    int t;
    scanf("%d", &t);

    while(t--){
        writeln(sol() ? true : false);
    }
}
